package destiny:store;

interface destiny-store-api {
    type user = string;

    type destination-name = string;

    enum month {
        january,
        february,
        march,
        april,
        may,
        june,
        july,
        august,
        september,
        october,
        november,
        december,
    }

    flags travel-length {
        weekend,
        long-weekend,
        week,
        two-weeks,
        three-weeks
    }

    enum rating {
        not-good,
        good,
        best
    }

    flags travel-by {
        car,
        motorbike,
        plane,
        train,
    }

    record destination {
        name: destination-name,
        user-defined-destination: user-defined-destination,
    }

    record user-defined-destination {
        approximated-travel-cost: option<u32>,
        approximated-daily-cost: option<u32>,
        lengths: option<travel-length>,
        month-ratings: option<list<tuple<month, rating>>>,
        description: option<string>,
        travel-by: option<travel-by>,
    }

    record preferences {
        month: month,
        lengths: option<travel-length>,
        travel-by: option<travel-by>,
    }

    type currency = string;

    variant error {
        not-found(destination-name),
        already-exists(destination-name),
        access-denied,
        not-initialized
    }

    resource store {
        constructor(user: user);

        set-currency: func(currency: currency) -> result<_, error>;
        get-currency: func() -> result<currency, error>;

        set-home-location: func(location: string) -> result<_, error>;
        get-home-location: func() -> result<string, error>;

        add-destination: func(name: destination-name, destination: user-defined-destination) -> result<_, error>;
        update-destination: func(name: destination-name, destination: user-defined-destination) -> result<_, error>;
        get-destination: func(name: destination-name) -> result<option<destination>, error>;
        get-destinations: func() -> result<list<destination>, error>;
        remove-destination: func(name: destination-name) -> result<_, error>;

        get-ordered-destinations: func(preferences: preferences) -> result<list<destination>, error>;
    }

    initialize: func(user: user) -> bool;
}

world destiny-store {
  export destiny-store-api;
}
